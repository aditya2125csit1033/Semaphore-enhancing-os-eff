#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>

#define MAX_THREADS 5

sem_t mutex;
sem_t full;
sem_t empty;
int buffer = 0;

void* producer(void* arg) {
    int item = *((int*)arg);
    
    sem_wait(&empty);
    sem_wait(&mutex);
    
    printf("Producer produces item: %d\n", item);
    buffer = item;
    
    sem_post(&mutex);
    sem_post(&full);
    
    pthread_exit(NULL);
}

void* consumer(void* arg) {
    sem_wait(&full);
    sem_wait(&mutex);
    
    int item = buffer;
    printf("Consumer consumes item: %d\n", item);
    
    sem_post(&mutex);
    sem_post(&empty);
    
    pthread_exit(NULL);
}

int main() {
    sem_init(&mutex, 0, 1);
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, MAX_THREADS);
    
    pthread_t producerThreads[MAX_THREADS];
    pthread_t consumerThreads[MAX_THREADS];
    
    int producerItems[MAX_THREADS];
    int consumerItems[MAX_THREADS];
    
    for (int i = 0; i < MAX_THREADS; i++) {
        producerItems[i] = i + 1;
        consumerItems[i] = i + 1;
        
        pthread_create(&producerThreads[i], NULL, producer, &producerItems[i]);
        pthread_create(&consumerThreads[i], NULL, consumer, &consumerItems[i]);
    }
    
    for (int i = 0; i < MAX_THREADS; i++) {
        pthread_join(producerThreads[i], NULL);
        pthread_join(consumerThreads[i], NULL);
    }
    
    sem_destroy(&mutex);
    sem_destroy(&full);
    sem_destroy(&empty);
    
    return 0;
}

